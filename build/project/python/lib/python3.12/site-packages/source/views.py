from had.shourtcuts import render, redirect, error_render, RenderSettings, json_render
from project import settings
import pandas_datareader.data as web
import pandas as pd
import datetime
import yfinance as yf
yf.set_tz_cache_location("/tmp/yf")

def _cal_score(EFFR_diff, DSG10_EFFR_diff, DGS10_diff, BAA10Y_diff, DTWEXBGS_rate):
  score = 0
  if EFFR_diff <= 0.25:
    score += 2
  else:
    score -= 2
  if DSG10_EFFR_diff >= 1:
    score += 2
  elif DSG10_EFFR_diff >= 0:
    score += 0
  else:
    score -= 2
  if DGS10_diff >= 0:
    score += 2
  else:
    score -= 2
  if BAA10Y_diff <= 0:
    score += 2
  else:
    score -= 2
  if DTWEXBGS_rate <= 1:
    score += 2
  else:
    score -= 2
  return score

def _add_SMA(df, period, name):
  # 移動平均を計算
  df[name] = df["Close"].rolling(window=period).mean()
  return df

def _add_BBands(df, period=20, nbdev=2, name={"up":"bb_up", "middle":"bb_middle", "down":"bb_down"}):
  # 移動平均を計算
  if name['middle'] not in df.columns:
    df[name['middle']] = df['Close'].rolling(window=period).mean()
  # 標準偏差を計算
  if "std" not in df.columns:
    df["std"] = df['Close'].rolling(window=period).std(ddof=0)
  # ボリンジャーバンドの上部と下部を計算
  df[name['up']] = df[name['middle']] + (df["std"] * nbdev)
  df[name['down']] = df[name['middle']] - (df["std"] * nbdev)
  return df

def score(request):
  # data = web.DataReader(["EFFR", "DGS10", "BAA10Y", "DTWEXBGS", "TWEXB"], "fred", datetime.datetime(2000, 3, 1), datetime.datetime(2005, 10, 1))
  data = web.DataReader(["EFFR", "DGS10", "BAA10Y", "DTWEXBGS", "SP500"], "fred", datetime.datetime(2000, 1, 1), datetime.datetime(2025, 10, 1))
  # 前年差を出す
  data["EFFR_diff"] = data["EFFR"] - data["EFFR"].shift(365, freq="D")
  data["DSG10_EFFR_diff"] = data["DGS10"] - data["EFFR"]
  data["DGS10_diff"] = data["DGS10"] - data["DGS10"].shift(365, freq="D")
  data["BAA10Y_diff"] = data["BAA10Y"] - data["BAA10Y"].shift(365, freq="D")
  data["DTWEXBGS_rate"] = data["DTWEXBGS"] / data["DTWEXBGS"].shift(365, freq="D")
  data["SP500_rate"] = data["SP500"] / data["SP500"].shift(365, freq="D")
  # NaNを削除
  data = data.dropna()
  # scoreを計算
  data["score"] = data.apply(lambda x: _cal_score(x["EFFR_diff"], x["DSG10_EFFR_diff"], x["DGS10_diff"], x["BAA10Y_diff"], x["DTWEXBGS_rate"]), axis=1)
  # daily to monthly
  data = data.resample("M").mean()
  data_list = [ {"time": index.strftime("%Y-%m-%d"), "score": d["score"], "SP500_rate": d["SP500_rate"]} for index, d in data.iterrows() ]
  # print(data_list)
  payload = {
    "source": "yahoo",
    "data": data_list
  }
  return json_render(request, payload)

def yahoo(request, symbol):
  ticker = f"{symbol.upper()}=X"
  df = yf.download(ticker, start='2022-01-01')
  # OpenとCloseが同じというバグがあるので、CloseをOpenで埋める
  # 暫定対応
  df["Close"] = df["Open"].shift(-1).combine_first(df["Close"])
  # request.logger.info(df)
  if df.empty:
    request.logger.info(f"Failed to get data for {symbol}, ticker={ticker}")
    payload = {
      "source": "yahoo",
      "data": []
    }
    return json_render(request, payload)
  df = _add_BBands(
    df,20,2,name={"up":"bb_up_2", "middle":"bb_middle", "down":"bb_down_2"}
  )
  df = _add_BBands(
    df,20,3,name={"up":"bb_up_3", "middle":"bb_middle", "down":"bb_down_3"}
  )
  df = _add_SMA(df, 25, "SMA1")
  df = _add_SMA(df, 75, "SMA2")
  df = _add_SMA(df, 200, "SMA3")
  df = df.dropna()
  data_list = [
    {
      "time": index.strftime("%Y-%m-%d"),
      "open": row["Open"].values[0],
      "high": row["High"].values[0],
      "low": row["Low"].values[0],
      "close": row["Close"].values[0],
      "sma1": row["SMA1"].values[0],
      "sma2": row["SMA2"].values[0],
      "sma3": row["SMA3"].values[0],
      "bb_up_2": row["bb_up_2"].values[0],
      "bb_up_3": row["bb_up_3"].values[0],
      "bb_down_2": row["bb_down_2"].values[0],
      "bb_down_3": row["bb_down_3"].values[0]
    } for index, row in df.iterrows()
  ]
  payload = {
    "source": "yahoo",
    "data": data_list
  }
  return json_render(request, payload)

