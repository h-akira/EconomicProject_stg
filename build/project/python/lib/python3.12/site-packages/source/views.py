from had.shourtcuts import render, redirect, error_render, RenderSettings, json_render
from project import settings
import pandas_datareader.data as web
import pandas as pd
import datetime
# try:
#   import boto3
#   from botocore.exceptions import ClientError
#   from boto3.dynamodb.conditions import Key, Attr
# except ModuleNotFoundError:
#   pass
#
# table_name = "table-wiki-stg"

# def index(request):
#   context = {}
#   return render(request, 'home/index.html', context)

def _cal_score(EFFR_diff, DSG10_EFFR_diff, DGS10_diff, BAA10Y_diff, DTWEXBGS_rate):
  score = 0
  if EFFR_diff <= 0.25:
    score += 2
  else:
    score -= 2
  if DSG10_EFFR_diff >= 1:
    score += 2
  elif DSG10_EFFR_diff >= 0:
    score += 0
  else:
    score -= 2
  if DGS10_diff >= 0:
    score += 2
  else:
    score -= 2
  if BAA10Y_diff <= 0:
    score += 2
  else:
    score -= 2
  if DTWEXBGS_rate <= 1:
    score += 2
  else:
    score -= 2
  return score

def score(request):
  # data = web.DataReader(["EFFR", "DGS10", "BAA10Y", "DTWEXBGS", "TWEXB"], "fred", datetime.datetime(2000, 3, 1), datetime.datetime(2005, 10, 1))
  data = web.DataReader(["EFFR", "DGS10", "BAA10Y", "DTWEXBGS", "SP500"], "fred", datetime.datetime(2000, 1, 1), datetime.datetime(2025, 10, 1))
  # 前年差を出す
  data["EFFR_diff"] = data["EFFR"] - data["EFFR"].shift(365, freq="D")
  data["DSG10_EFFR_diff"] = data["DGS10"] - data["EFFR"]
  data["DGS10_diff"] = data["DGS10"] - data["DGS10"].shift(365, freq="D")
  data["BAA10Y_diff"] = data["BAA10Y"] - data["BAA10Y"].shift(365, freq="D")
  data["DTWEXBGS_rate"] = data["DTWEXBGS"] / data["DTWEXBGS"].shift(365, freq="D")
  data["SP500_rate"] = data["SP500"] / data["SP500"].shift(365, freq="D")
  print(data)
  # NaNを削除
  data = data.dropna()
  # scoreを計算
  data["score"] = data.apply(lambda x: _cal_score(x["EFFR_diff"], x["DSG10_EFFR_diff"], x["DGS10_diff"], x["BAA10Y_diff"], x["DTWEXBGS_rate"]), axis=1)
  # daily to monthly
  data = data.resample("M").mean()
  data_list = [ {"time": index.strftime("%Y-%m-%d"), "score": d["score"], "SP500_rate": d["SP500_rate"]} for index, d in data.iterrows() ]
  # print(data_list)
  payload = {
    "data": data_list
  }
  return json_render(payload)

